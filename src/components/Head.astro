---
import "../styles/global.css";
import "@fontsource/inter/latin-400.css";
import "@fontsource/inter/latin-600.css";
import "@fontsource/lora/400.css";
import "@fontsource/lora/600.css";
import inter400 from "@fontsource/inter/files/inter-latin-400-normal.woff2";
import inter600 from "@fontsource/inter/files/inter-latin-600-normal.woff2";
import lora400 from "@fontsource/lora/files/lora-latin-400-normal.woff2";
import lora600 from "@fontsource/lora/files/lora-latin-600-normal.woff2";
import { ClientRouter } from "astro:transitions";
import { SITE } from "@consts";

interface Props {
  title: string;
  description: string;
  image?: string;
  article?: boolean;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const { 
  title, 
  description, 
  image = "/astro-nano.png",
  article = false 
} = Astro.props;

// Format date for schema
const datePublished = new Date().toISOString();
// Default image dimensions
const imageWidth = 1200;
const imageHeight = 630;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type="image/svg+xml" href="/favicon-dark.svg" media="(prefers-color-scheme: dark)">
<link rel="icon" type="image/svg+xml" href="/favicon-light.svg" media="(prefers-color-scheme: light)">
<link rel="icon" type="image/x-icon" href="/favicon-light.svg">
<meta name="generator" content={Astro.generator} />
<link rel="manifest" href="/manifest.json" />
<meta name="theme-color" content="#000000" />

<!-- Font preloads -->
<link rel="preload" href={inter400} as="font" type="font/woff2" crossorigin />
<link rel="preload" href={inter600} as="font" type="font/woff2" crossorigin />
<link rel="preload" href={lora400} as="font" type="font/woff2" crossorigin />
<link rel="preload" href={lora600} as="font" type="font/woff2" crossorigin />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- RSS Feed -->
<link rel="alternate" type="application/rss+xml" title={`${SITE.NAME} RSS Feed`} href="/rss.xml" />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />
<meta name="author" content={SITE.NAME} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content={article ? "article" : "website"} />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />
<meta property="og:image:width" content={imageWidth.toString()} />
<meta property="og:image:height" content={imageHeight.toString()} />
<meta property="og:site_name" content={SITE.NAME} />
<meta property="og:locale" content="en_US" />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />
<meta name="twitter:creator" content={SITE.NAME} />

<!-- JSON-LD for structured data -->
<script is:inline type="application/ld+json">
  {
    "@context": "https://schema.org",
    "@type": article ? "BlogPosting" : "WebPage",
    "headline": title,
    "description": description,
    "image": new URL(image, Astro.url).toString(),
    "datePublished": datePublished,
    "author": {
      "@type": "Person",
      "name": SITE.NAME,
      "url": Astro.site?.toString()
    },
    "publisher": {
      "@type": "Person",
      "name": SITE.NAME,
      "url": Astro.site?.toString()
    },
    "url": Astro.url.toString()
  }
</script>

<ClientRouter />

<script>
  import type { TransitionBeforeSwapEvent } from "astro:transitions/client";
  
  // Remove font preload links from the new document to prevent duplicate font loading
  document.addEventListener("astro:before-swap", (e) => {
    const newDocument = (e as TransitionBeforeSwapEvent).newDocument;
    const fontLinks = newDocument.head.querySelectorAll('link[as="font"]');
    fontLinks.forEach((link) => link.remove());
  });
</script>

<script is:inline>
  // Theme management
  const THEME_STORAGE_KEY = "theme";
  const THEME = {
    LIGHT: "light",
    DARK: "dark",
    SYSTEM: "system"
  };
  
  // DOM event handlers
  function init() {
    preloadTheme();
    onScroll();
    animate();
    setupEventListeners();
  }

  function setupEventListeners() {
    // Back to top button
    const backToTop = document.getElementById("back-to-top");
    backToTop?.addEventListener("click", (event) => scrollToTop(event));

    // Back button
    const backToPrev = document.getElementById("back-to-prev");
    backToPrev?.addEventListener("click", () => window.history.back());

    // Theme switcher buttons
    const lightThemeButton = document.getElementById("light-theme-button");
    lightThemeButton?.addEventListener("click", () => {
      localStorage.setItem(THEME_STORAGE_KEY, THEME.LIGHT);
      setTheme(THEME.LIGHT);
    });

    const darkThemeButton = document.getElementById("dark-theme-button");
    darkThemeButton?.addEventListener("click", () => {
      localStorage.setItem(THEME_STORAGE_KEY, THEME.DARK);
      setTheme(THEME.DARK);
    });

    const systemThemeButton = document.getElementById("system-theme-button");
    systemThemeButton?.addEventListener("click", () => {
      localStorage.setItem(THEME_STORAGE_KEY, THEME.SYSTEM);
      setTheme(THEME.SYSTEM);
    });

    // Listen for system theme changes
    window.matchMedia("(prefers-color-scheme: dark)")
      .addEventListener("change", event => {
        if (localStorage.getItem(THEME_STORAGE_KEY) === THEME.SYSTEM) {
          setTheme(THEME.SYSTEM);
        }
      });

    // Scroll event
    document.addEventListener("scroll", onScroll);
  }

  // Animation handling
  function animate() {
    const animateElements = document.querySelectorAll(".animate");
    animateElements.forEach((element, index) => {
      setTimeout(() => {
        element.classList.add("show");
      }, index * 150);
    });
  }

  // Scroll handling
  function onScroll() {
    if (window.scrollY > 0) {
      document.documentElement.classList.add("scrolled");
    } else {
      document.documentElement.classList.remove("scrolled");
    }
  }

  function scrollToTop(event) {
    event.preventDefault();
    window.scrollTo({
      top: 0,
      behavior: "smooth"
    });
  }

  // Theme handling
  function setTheme(theme) {
    // Prevent transition flicker when changing themes
    const css = document.createElement("style");
    css.appendChild(
      document.createTextNode(
        `* {
           -webkit-transition: none !important;
           -moz-transition: none !important;
           -o-transition: none !important;
           -ms-transition: none !important;
           transition: none !important;
        }`
      )
    );
    document.head.appendChild(css);

    // Determine if we should use dark mode
    let isDark = false;
    
    if (theme === THEME.DARK) {
      isDark = true;
    } else if (theme === THEME.SYSTEM) {
      isDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
    }
    // THEME.LIGHT will keep isDark as false

    // Apply theme
    if (isDark) {
      document.documentElement.classList.add("dark");
    } else {
      document.documentElement.classList.remove("dark");
    }

    // Force repaint
    window.getComputedStyle(css).opacity;
    document.head.removeChild(css);
  }

  function preloadTheme() {
    const userTheme = localStorage.getItem(THEME_STORAGE_KEY);

    if (userTheme === THEME.LIGHT || userTheme === THEME.DARK || userTheme === THEME.SYSTEM) {
      setTheme(userTheme);
    } else {
      // If no theme is set, default to system theme
      localStorage.setItem(THEME_STORAGE_KEY, THEME.SYSTEM);
      setTheme(THEME.SYSTEM);
    }
  }

  // Initialize on page load and after navigation
  document.addEventListener("DOMContentLoaded", init);
  document.addEventListener("astro:after-swap", init);
  
  // Preload theme immediately to prevent flash of wrong theme
  preloadTheme();
</script>